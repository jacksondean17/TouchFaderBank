<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [FaderBankv1\FaderBankv1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image FaderBankv1\FaderBankv1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon May 02 16:04:32 2022
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_ResumeCallback &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[91]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2f]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[1f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">HardFault_Handler</a><BR>
 <LI><a href="#[1e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC1_COMP_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[41]">CEC_CAN_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[28]">EXTI0_1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[29]">EXTI2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2a]">EXTI4_15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[26]">FLASH_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1f]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3a]">I2C1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3b]">I2C2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[e]">MIDI_DeInit</a> from usbd_midi_if.o(i.MIDI_DeInit) referenced 2 times from usbd_midi_if.o(.data)
 <LI><a href="#[d]">MIDI_Init</a> from usbd_midi_if.o(i.MIDI_Init) referenced 2 times from usbd_midi_if.o(.data)
 <LI><a href="#[f]">MIDI_Receive</a> from usbd_midi_if.o(i.MIDI_Receive) referenced 2 times from usbd_midi_if.o(.data)
 <LI><a href="#[10]">MIDI_Send</a> from usbd_midi_if.o(i.MIDI_Send) referenced 2 times from usbd_midi_if.o(.data)
 <LI><a href="#[68]">MyLinRots_ErrorStateProcess</a> from tsl_user.o(i.MyLinRots_ErrorStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[6a]">MyLinRots_OffStateProcess</a> from tsl_user.o(i.MyLinRots_OffStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[56]">MyTKeys_ErrorStateProcess</a> from tsl_user.o(i.MyTKeys_ErrorStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[58]">MyTKeys_OffStateProcess</a> from tsl_user.o(i.MyTKeys_OffStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[1e]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[24]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[21]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[27]">RCC_CRS_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[25]">RTC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1d]">Reset_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[20]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[22]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[36]">TIM14_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[37]">TIM15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[38]">TIM16_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[39]">TIM17_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[31]">TIM1_CC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[32]">TIM2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[33]">TIM3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[34]">TIM6_DAC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[35]">TIM7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2b]">TSC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[6d]">TSL_linrot_CalcPos</a> from tsl_linrot.o(i.TSL_linrot_CalcPos) referenced from tsl_user.o(.constdata)
 <LI><a href="#[5b]">TSL_linrot_CalibrationStateProcess</a> from tsl_linrot.o(i.TSL_linrot_CalibrationStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[5c]">TSL_linrot_DebCalibrationStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebCalibrationStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[66]">TSL_linrot_DebDetectStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebDetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[69]">TSL_linrot_DebErrorStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebErrorStateProcess) referenced 5 times from tsl_user.o(.constdata)
 <LI><a href="#[63]">TSL_linrot_DebProxDetectStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebProxDetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[62]">TSL_linrot_DebProxStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebProxStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[64]">TSL_linrot_DebProxTouchStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebProxTouchStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[5f]">TSL_linrot_DebReleaseDetectStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebReleaseDetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[5e]">TSL_linrot_DebReleaseProxStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebReleaseProxStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[60]">TSL_linrot_DebReleaseTouchStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebReleaseTouchStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[65]">TSL_linrot_DetectStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[6b]">TSL_linrot_Init</a> from tsl_linrot.o(i.TSL_linrot_Init) referenced from tsl_user.o(.constdata)
 <LI><a href="#[6c]">TSL_linrot_Process</a> from tsl_linrot.o(i.TSL_linrot_Process) referenced from tsl_user.o(.constdata)
 <LI><a href="#[61]">TSL_linrot_ProxStateProcess</a> from tsl_linrot.o(i.TSL_linrot_ProxStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[5d]">TSL_linrot_ReleaseStateProcess</a> from tsl_linrot.o(i.TSL_linrot_ReleaseStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[48]">TSL_linrot_SetStateCalibration</a> from tsl_linrot.o(i.TSL_linrot_SetStateCalibration) referenced from tsl_ecs.o(i.TSL_ecs_ProcessK)
 <LI><a href="#[67]">TSL_linrot_TouchStateProcess</a> from tsl_linrot.o(i.TSL_linrot_TouchStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[49]">TSL_tkey_CalibrationStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_CalibrationStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4a]">TSL_tkey_DebCalibrationStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebCalibrationStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[54]">TSL_tkey_DebDetectStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebDetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[57]">TSL_tkey_DebErrorStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebErrorStateProcess) referenced 5 times from tsl_user.o(.constdata)
 <LI><a href="#[51]">TSL_tkey_DebProxDetectStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebProxDetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[50]">TSL_tkey_DebProxStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebProxStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[52]">TSL_tkey_DebProxTouchStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebProxTouchStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4d]">TSL_tkey_DebReleaseDetectStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebReleaseDetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4c]">TSL_tkey_DebReleaseProxStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebReleaseProxStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4e]">TSL_tkey_DebReleaseTouchStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DebReleaseTouchStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[53]">TSL_tkey_DetectStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_DetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[59]">TSL_tkey_Init</a> from tsl_touchkey.o(i.TSL_tkey_Init) referenced from tsl_user.o(.constdata)
 <LI><a href="#[5a]">TSL_tkey_Process</a> from tsl_touchkey.o(i.TSL_tkey_Process) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4f]">TSL_tkey_ProxStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_ProxStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4b]">TSL_tkey_ReleaseStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_ReleaseStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[47]">TSL_tkey_SetStateCalibration</a> from tsl_touchkey.o(i.TSL_tkey_SetStateCalibration) referenced from tsl_ecs.o(i.TSL_ecs_ProcessK)
 <LI><a href="#[55]">TSL_tkey_TouchStateProcess</a> from tsl_touchkey.o(i.TSL_tkey_TouchStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[40]">USART3_4_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[b]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[c]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[7]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[8]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[9]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[a]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[16]">USBD_MIDI_DataIn</a> from usbd_midi.o(i.USBD_MIDI_DataIn) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[17]">USBD_MIDI_DataOut</a> from usbd_midi.o(i.USBD_MIDI_DataOut) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[12]">USBD_MIDI_DeInit</a> from usbd_midi.o(i.USBD_MIDI_DeInit) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[15]">USBD_MIDI_EP0_RxReady</a> from usbd_midi.o(i.USBD_MIDI_EP0_RxReady) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[14]">USBD_MIDI_EP0_TxReady</a> from usbd_midi.o(i.USBD_MIDI_EP0_TxReady) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[1b]">USBD_MIDI_GetCfgDesc</a> from usbd_midi.o(i.USBD_MIDI_GetCfgDesc) referenced 6 times from usbd_midi.o(.data)
 <LI><a href="#[1c]">USBD_MIDI_GetDeviceQualifierDesc</a> from usbd_midi.o(i.USBD_MIDI_GetDeviceQualifierDesc) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[11]">USBD_MIDI_Init</a> from usbd_midi.o(i.USBD_MIDI_Init) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[19]">USBD_MIDI_IsoINIncomplete</a> from usbd_midi.o(i.USBD_MIDI_IsoINIncomplete) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[1a]">USBD_MIDI_IsoOutIncomplete</a> from usbd_midi.o(i.USBD_MIDI_IsoOutIncomplete) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[18]">USBD_MIDI_SOF</a> from usbd_midi.o(i.USBD_MIDI_SOF) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[13]">USBD_MIDI_Setup</a> from usbd_midi.o(i.USBD_MIDI_Setup) referenced 2 times from usbd_midi.o(.data)
 <LI><a href="#[42]">USB_IRQHandler</a> from stm32f0xx_it.o(i.USB_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[23]">WWDG_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[6e]">__main</a> from __main.o(!!!main) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[46]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[45]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[71]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[137]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[138]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[139]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[83]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[72]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[73]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[13a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[140]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[141]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[142]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[143]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[145]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[146]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[147]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[148]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[149]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[151]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[152]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[153]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[154]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[155]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[156]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[70]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[157]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[75]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[158]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[79]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[159]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[93]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[15a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[15c]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[74]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_SetTxBuffer
</UL>

<P><STRONG><a name="[15d]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[8a]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[15e]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_CalcPos
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[81]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[45]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[76]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[166]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[167]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[168]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[94]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>HAL_GPIO_Init</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Receive
</UL>

<P><STRONG><a name="[e5]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_Init
</UL>

<P><STRONG><a name="[95]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[e7]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9a]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_MspInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[9f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[c1]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f0xx_hal_pcd_ex.o(i.HAL_PCDEx_ActivateLPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_ActivateLPM
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_PCDEx_PMAConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f0xx_hal_pcd_ex.o(i.HAL_PCDEx_PMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Transmit
</UL>

<P><STRONG><a name="[a3]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[a5]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[a7]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[123]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[ad]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[af]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[b1]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[b3]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[b4]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_ResumeCallback &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>HAL_PCD_Init</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_PCD_ResumeCallback &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[ca]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_PCD_Start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[bb]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[110]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d2]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1028 bytes, Stack size 32 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TSC_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f0xx_hal_tsc.o(i.HAL_TSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TSC_Init &rArr; HAL_TSC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_MspInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_extract_groups
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TSC_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TSC_MspInit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, stm32f0xx_hal_msp.o(i.HAL_TSC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TSC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_UART_MspInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>InitFaderBank</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fader_bank.o(i.InitFaderBank))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>MIDI_cc_update</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_midi_if.o(i.MIDI_cc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MIDI_cc_update &rArr; MIDI_Send &rArr; USBD_MIDI_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>MX_TOUCHSENSING_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, touchsensing.o(i.MX_TOUCHSENSING_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_TOUCHSENSING_Init &rArr; tsl_user_Init &rArr; TSL_obj_GroupInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_RegisterInterface
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>MyLinRots_ErrorStateProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_user.o(i.MyLinRots_ErrorStateProcess))
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>MyLinRots_OffStateProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_user.o(i.MyLinRots_OffStateProcess))
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>MyTKeys_ErrorStateProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_user.o(i.MyTKeys_ErrorStateProcess))
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>MyTKeys_OffStateProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_user.o(i.MyTKeys_OffStateProcess))
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_ProcessIT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 112 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>TSL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tsl.o(i.TSL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Init
</UL>

<P><STRONG><a name="[134]"></a>TSL_acq_BankConfig</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, tsl_acq_tsc.o(i.TSL_acq_BankConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_acq_BankConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[f5]"></a>TSL_acq_BankGetResult</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, tsl_acq.o(i.TSL_acq_BankGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSL_acq_BankGetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_UseFilter
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_GetMeas
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_ComputeDelta
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_CheckNoise
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[fa]"></a>TSL_acq_BankStartAcq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tsl_acq_tsc.o(i.TSL_acq_BankStartAcq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_acq_BankStartAcq &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[135]"></a>TSL_acq_BankWaitEOC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tsl_acq_tsc.o(i.TSL_acq_BankWaitEOC))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[f9]"></a>TSL_acq_CheckNoise</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_tsc.o(i.TSL_acq_CheckNoise))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
</UL>

<P><STRONG><a name="[f8]"></a>TSL_acq_ComputeDelta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsl_acq_tsc.o(i.TSL_acq_ComputeDelta))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
</UL>

<P><STRONG><a name="[101]"></a>TSL_acq_ComputeMeas</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsl_acq_tsc.o(i.TSL_acq_ComputeMeas))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK
</UL>

<P><STRONG><a name="[f6]"></a>TSL_acq_GetMeas</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tsl_acq_tsc.o(i.TSL_acq_GetMeas))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
</UL>

<P><STRONG><a name="[104]"></a>TSL_acq_TestFirstReferenceIsValid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_tsc.o(i.TSL_acq_TestFirstReferenceIsValid))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_CalibrationStateProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_CalibrationStateProcess
</UL>

<P><STRONG><a name="[102]"></a>TSL_acq_TestReferenceOutOfRange</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_tsc.o(i.TSL_acq_TestReferenceOutOfRange))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK
</UL>

<P><STRONG><a name="[f7]"></a>TSL_acq_UseFilter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_tsc.o(i.TSL_acq_UseFilter))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
</UL>

<P><STRONG><a name="[136]"></a>TSL_dxs_FirstObj</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_dxs.o(i.TSL_dxs_FirstObj))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[fc]"></a>TSL_ecs_CalcK</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, tsl_ecs.o(i.TSL_ecs_CalcK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSL_ecs_CalcK
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process
</UL>

<P><STRONG><a name="[fe]"></a>TSL_ecs_Process</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tsl_ecs.o(i.TSL_ecs_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSL_ecs_Process &rArr; TSL_ecs_ProcessK
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_CheckDelay_ms
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_CalcK
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[100]"></a>TSL_ecs_ProcessK</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, tsl_ecs.o(i.TSL_ecs_ProcessK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSL_ecs_ProcessK
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_TestReferenceOutOfRange
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_ComputeMeas
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process
</UL>

<P><STRONG><a name="[6d]"></a>TSL_linrot_CalcPos</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, tsl_linrot.o(i.TSL_linrot_CalcPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_linrot_CalcPos
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>TSL_linrot_CalibrationStateProcess</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, tsl_linrot.o(i.TSL_linrot_CalibrationStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_linrot_CalibrationStateProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_TestFirstReferenceIsValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>TSL_linrot_DebCalibrationStateProcess</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebCalibrationStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TSL_linrot_DebCalibrationStateProcess &rArr; TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaBelowEquMinus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>TSL_linrot_DebDetectStateProcess</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebDetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_DebDetectStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAboveEqu
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAboveEqu
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>TSL_linrot_DebErrorStateProcess</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_DebErrorStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSL_linrot_DebErrorStateProcess &rArr; TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_GetStateMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>TSL_linrot_DebProxDetectStateProcess</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebProxDetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_DebProxDetectStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>TSL_linrot_DebProxStateProcess</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebProxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_DebProxStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAboveEqu
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAboveEqu
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>TSL_linrot_DebProxTouchStateProcess</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebProxTouchStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_DebProxTouchStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>TSL_linrot_DebReleaseDetectStateProcess</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebReleaseDetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_DebReleaseDetectStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>TSL_linrot_DebReleaseProxStateProcess</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebReleaseProxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_DebReleaseProxStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>TSL_linrot_DebReleaseTouchStateProcess</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebReleaseTouchStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_DebReleaseTouchStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>TSL_linrot_DetectStateProcess</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_DetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_linrot_DetectStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>TSL_linrot_GetStateMask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tsl_linrot.o(i.TSL_linrot_GetStateMask))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebErrorStateProcess
</UL>

<P><STRONG><a name="[6b]"></a>TSL_linrot_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSL_linrot_Init &rArr; TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>TSL_linrot_Process</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tsl_linrot.o(i.TSL_linrot_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TSL_linrot_Process &rArr; TSL_linrot_ProcessCh_One_DataReady
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>TSL_linrot_ProcessCh_All_ClearRef</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_All_ClearRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_linrot_ProcessCh_All_ClearRef
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>

<P><STRONG><a name="[10a]"></a>TSL_linrot_ProcessCh_All_DeltaBelowEqu</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_All_DeltaBelowEqu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_linrot_ProcessCh_All_DeltaBelowEqu
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProxStateProcess
</UL>

<P><STRONG><a name="[10b]"></a>TSL_linrot_ProcessCh_All_SetStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_All_SetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>

<P><STRONG><a name="[103]"></a>TSL_linrot_ProcessCh_One_AcqStatusError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_AcqStatusError))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_TouchStateProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ReleaseStateProcess
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProxStateProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DetectStateProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseTouchStateProcess
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseProxStateProcess
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseDetectStateProcess
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebProxTouchStateProcess
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebProxStateProcess
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebProxDetectStateProcess
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebErrorStateProcess
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebDetectStateProcess
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebCalibrationStateProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_CalibrationStateProcess
</UL>

<P><STRONG><a name="[109]"></a>TSL_linrot_ProcessCh_One_DataReady</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_DataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_linrot_ProcessCh_One_DataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_Process
</UL>

<P><STRONG><a name="[108]"></a>TSL_linrot_ProcessCh_One_DeltaAbove</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_DeltaAbove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_TouchStateProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DetectStateProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseTouchStateProcess
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseProxStateProcess
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseDetectStateProcess
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebProxTouchStateProcess
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebProxDetectStateProcess
</UL>

<P><STRONG><a name="[106]"></a>TSL_linrot_ProcessCh_One_DeltaAboveEqu</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_DeltaAboveEqu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_linrot_ProcessCh_One_DeltaAboveEqu
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ReleaseStateProcess
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProxStateProcess
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebProxStateProcess
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebDetectStateProcess
</UL>

<P><STRONG><a name="[105]"></a>TSL_linrot_ProcessCh_One_DeltaBelowEquMinus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_DeltaBelowEquMinus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_linrot_ProcessCh_One_DeltaBelowEquMinus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ReleaseStateProcess
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebCalibrationStateProcess
</UL>

<P><STRONG><a name="[61]"></a>TSL_linrot_ProxStateProcess</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ProxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_linrot_ProxStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAboveEqu
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAboveEqu
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_All_DeltaBelowEqu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>TSL_linrot_ReleaseStateProcess</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ReleaseStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSL_linrot_ReleaseStateProcess &rArr; TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaBelowEquMinus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAboveEqu
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>TSL_linrot_SetStateCalibration</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_SetStateCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_All_SetStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_All_ClearRef
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ReleaseStateProcess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebErrorStateProcess
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebCalibrationStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_ecs.o(i.TSL_ecs_ProcessK)
</UL>
<P><STRONG><a name="[67]"></a>TSL_linrot_TouchStateProcess</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_TouchStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_linrot_TouchStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>TSL_obj_GroupInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tsl_object.o(i.TSL_obj_GroupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_obj_GroupInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Init
</UL>

<P><STRONG><a name="[10e]"></a>TSL_obj_GroupProcess</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tsl_object.o(i.TSL_obj_GroupProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_obj_GroupProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[fd]"></a>TSL_obj_SetGlobalObj</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tsl_object.o(i.TSL_obj_SetGlobalObj))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupProcess
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_CalcK
</UL>

<P><STRONG><a name="[ff]"></a>TSL_tim_CheckDelay_ms</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tsl_time.o(i.TSL_tim_CheckDelay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_tim_CheckDelay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[f3]"></a>TSL_tim_ProcessIT</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tsl_time.o(i.TSL_tim_ProcessIT))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[49]"></a>TSL_tkey_CalibrationStateProcess</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tsl_touchkey.o(i.TSL_tkey_CalibrationStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_tkey_CalibrationStateProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_TestFirstReferenceIsValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>TSL_tkey_DebCalibrationStateProcess</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tsl_touchkey.o(i.TSL_tkey_DebCalibrationStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_tkey_DebCalibrationStateProcess &rArr; TSL_tkey_SetStateCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_SetStateCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>TSL_tkey_DebDetectStateProcess</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, tsl_touchkey.o(i.TSL_tkey_DebDetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebDetectStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>TSL_tkey_DebErrorStateProcess</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_touchkey.o(i.TSL_tkey_DebErrorStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_tkey_DebErrorStateProcess &rArr; TSL_tkey_SetStateCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_SetStateCalibration
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_GetStateMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>TSL_tkey_DebProxDetectStateProcess</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, tsl_touchkey.o(i.TSL_tkey_DebProxDetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebProxDetectStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>TSL_tkey_DebProxStateProcess</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, tsl_touchkey.o(i.TSL_tkey_DebProxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebProxStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>TSL_tkey_DebProxTouchStateProcess</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, tsl_touchkey.o(i.TSL_tkey_DebProxTouchStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebProxTouchStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>TSL_tkey_DebReleaseDetectStateProcess</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, tsl_touchkey.o(i.TSL_tkey_DebReleaseDetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebReleaseDetectStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>TSL_tkey_DebReleaseProxStateProcess</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, tsl_touchkey.o(i.TSL_tkey_DebReleaseProxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebReleaseProxStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>TSL_tkey_DebReleaseTouchStateProcess</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, tsl_touchkey.o(i.TSL_tkey_DebReleaseTouchStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebReleaseTouchStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>TSL_tkey_DetectStateProcess</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_touchkey.o(i.TSL_tkey_DetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_tkey_DetectStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>TSL_tkey_GetStateMask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tsl_touchkey.o(i.TSL_tkey_GetStateMask))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_DebErrorStateProcess
</UL>

<P><STRONG><a name="[59]"></a>TSL_tkey_Init</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, tsl_touchkey.o(i.TSL_tkey_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_tkey_Init &rArr; TSL_tkey_SetStateCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_SetStateCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>TSL_tkey_Process</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tsl_touchkey.o(i.TSL_tkey_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_tkey_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>TSL_tkey_ProxStateProcess</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_touchkey.o(i.TSL_tkey_ProxStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_tkey_ProxStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>TSL_tkey_ReleaseStateProcess</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tsl_touchkey.o(i.TSL_tkey_ReleaseStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_tkey_ReleaseStateProcess &rArr; TSL_tkey_SetStateCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_SetStateCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>TSL_tkey_SetStateCalibration</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, tsl_touchkey.o(i.TSL_tkey_SetStateCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_SetStateCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_ReleaseStateProcess
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_DebErrorStateProcess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_DebCalibrationStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_ecs.o(i.TSL_ecs_ProcessK)
</UL>
<P><STRONG><a name="[55]"></a>TSL_tkey_TouchStateProcess</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_touchkey.o(i.TSL_tkey_TouchStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_tkey_TouchStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[dd]"></a>UART_CheckIdleState</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[db]"></a>UART_SetConfig</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[df]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, stm32f0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[12f]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[111]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[113]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[115]"></a>USBD_CtlError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[117]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[118]"></a>USBD_CtlSendData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[119]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[b]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[11a]"></a>USBD_GetString</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[ee]"></a>USBD_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[11f]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[121]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_DeInit
</UL>

<P><STRONG><a name="[a2]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[a4]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[122]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_DataOut
</UL>

<P><STRONG><a name="[11e]"></a>USBD_LL_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_PMAConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[131]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[125]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[112]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_DataOut
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[c5]"></a>USBD_LL_Reset</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[c7]"></a>USBD_LL_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[c8]"></a>USBD_LL_SOF</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[c4]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[126]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[cb]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[116]"></a>USBD_LL_StallEP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[12b]"></a>USBD_LL_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[cf]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[114]"></a>USBD_LL_Transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_TransmitPacket
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[f0]"></a>USBD_MIDI_RegisterInterface</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[e1]"></a>USBD_MIDI_SetTxBuffer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_midi.o(i.USBD_MIDI_SetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_MIDI_SetTxBuffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Send
</UL>

<P><STRONG><a name="[e2]"></a>USBD_MIDI_TransmitPacket</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_midi.o(i.USBD_MIDI_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_MIDI_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Send
</UL>

<P><STRONG><a name="[127]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[ef]"></a>USBD_RegisterClass</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[130]"></a>USBD_SetClassConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[f1]"></a>USBD_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[128]"></a>USBD_StdDevReq</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[12a]"></a>USBD_StdEPReq</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[129]"></a>USBD_StdItfReq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[12c]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_DeInit
</UL>

<P><STRONG><a name="[12d]"></a>USBD_static_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_Init
</UL>

<P><STRONG><a name="[ae]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 564 bytes, Stack size 20 bytes, stm32f0xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[a6]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, stm32f0xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[ce]"></a>USB_DevConnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[c0]"></a>USB_DevInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[bf]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[a8]"></a>USB_EPClearStall</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f0xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[b2]"></a>USB_EPSetStall</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f0xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[b0]"></a>USB_EPStartXfer</STRONG> (Thumb, 1176 bytes, Stack size 20 bytes, stm32f0xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[cd]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[42]"></a>USB_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USB_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_ResumeCallback &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>USB_ReadInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>USB_ReadPMA</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f0xx_ll_usb.o(i.USB_ReadPMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPMA
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Receive
</UL>

<P><STRONG><a name="[c9]"></a>USB_SetDevAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[ac]"></a>USB_WritePMA</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_ll_usb.o(i.USB_WritePMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Transmit
</UL>

<P><STRONG><a name="[d4]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[11d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[7a]"></a>main</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOUCHSENSING_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_cc_update
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFaderBank
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TSC_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[133]"></a>tsl_user_Exec</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tsl_user.o(i.tsl_user_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tsl_user_Exec &rArr; TSL_ecs_Process &rArr; TSL_ecs_ProcessK
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_CheckDelay_ms
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupProcess
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_dxs_FirstObj
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankWaitEOC
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankStartAcq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>tsl_user_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tsl_user.o(i.tsl_user_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tsl_user_Init &rArr; TSL_obj_GroupInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOUCHSENSING_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e4]"></a>MX_GPIO_Init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>MX_I2C1_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>MX_TSC_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(i.MX_TSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_TSC_Init &rArr; HAL_TSC_Init &rArr; HAL_TSC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d8]"></a>TSC_extract_groups</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f0xx_hal_tsc.o(i.TSC_extract_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSC_extract_groups
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_PCD_EP_DB_Receive</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_DB_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_DB_Receive &rArr; USB_ReadPMA
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPMA
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_PCD_EP_DB_Transmit</STRONG> (Thumb, 812 bytes, Stack size 32 bytes, stm32f0xx_hal_pcd.o(i.HAL_PCD_EP_DB_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_PCD_EP_DB_Transmit &rArr; HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePMA
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[b6]"></a>PCD_EP_ISR_Handler</STRONG> (Thumb, 876 bytes, Stack size 32 bytes, stm32f0xx_hal_pcd.o(i.PCD_EP_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PCD_EP_ISR_Handler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPMA
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Transmit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Receive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>SoftDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tsl_acq_tsc.o(i.SoftDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankStartAcq
</UL>

<P><STRONG><a name="[11b]"></a>IntToUnicode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[e]"></a>MIDI_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_midi_if.o(i.MIDI_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi_if.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>MIDI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_midi_if.o(i.MIDI_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi_if.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>MIDI_Receive</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_midi_if.o(i.MIDI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MIDI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi_if.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>MIDI_Send</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_midi_if.o(i.MIDI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MIDI_Send &rArr; USBD_MIDI_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_TransmitPacket
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MIDI_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_cc_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi_if.o(.data)
</UL>
<P><STRONG><a name="[120]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[16]"></a>USBD_MIDI_DataIn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_MIDI_DataOut</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, usbd_midi.o(i.USBD_MIDI_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_MIDI_DataOut &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_MIDI_DeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_midi.o(i.USBD_MIDI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_MIDI_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_MIDI_EP0_RxReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_EP0_RxReady))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_MIDI_EP0_TxReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_EP0_TxReady))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_MIDI_GetCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_MIDI_GetDeviceQualifierDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_GetDeviceQualifierDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_MIDI_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_midi.o(i.USBD_MIDI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_MIDI_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_MIDI_IsoINIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_IsoINIncomplete))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_MIDI_IsoOutIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_IsoOutIncomplete))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_MIDI_SOF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_MIDI_Setup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_midi.o(i.USBD_MIDI_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usbd_midi.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>USBD_GetDescriptor</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[12e]"></a>USBD_SetConfig</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[46]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8f]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8e]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[84]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
